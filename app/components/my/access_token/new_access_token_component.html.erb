<%#-- copyright
OpenProject is an open source project management software.
Copyright (C) 2012-2024 the OpenProject GmbH

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License version 3.

OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
Copyright (C) 2006-2013 Jean-Philippe Lang
Copyright (C) 2010-2013 the ChiliProject Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

See COPYRIGHT and LICENSE files for more details.

++#%>

<%=
  component_wrapper do
    render(
      Primer::Alpha::Dialog.new(
        id: dialog_id,
        title:,
        test_selector: dialog_id,
        size: :large
      )
    ) do |dialog|
      dialog.with_show_button(scheme: :primary, mt: 3) do |button|
        button.with_leading_visual_icon(icon: :plus)
        show_button_text
      end

      dialog.with_header(
        show_divider: false,
        visually_hide_title: false
      )

      primer_form_with(
        url: my_generate_api_key_path,
        data: { turbo: true },
        method: :post
      ) do |form|
        concat(render(Primer::Alpha::Dialog::Body.new(
          id: dialog_body_id, test_selector: dialog_body_id, aria: { label: title }
        )) do
          concat(render(Primer::Alpha::Banner.new(scheme: :warning, mt: 3)) { attention_text })
          concat(render(Primer::Beta::Text.new(tag: :p, mt: 3, mb: 3)) { text })
          concat(render(My::AccessToken::NewAccessTokenForm.new(form)))
        end)

        concat(render(Primer::Alpha::Dialog::Footer.new(show_divider: false)) do
          concat(render(Primer::ButtonComponent.new(data: { 'close-dialog-id': dialog_id })) { cancel_button_text })
          concat(render(Primer::ButtonComponent.new(scheme: :primary, type: :submit)) { submit_button_text })
        end)
      end
    end
  end
%>
